//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NativeGL {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Shaders {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Shaders() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("NativeGL.Shaders", typeof(Shaders).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 120
        ///
        ///uniform sampler2D textureImage;
        ///uniform float dist; // should be about 0.25
        ///
        ///void main( void )
        ///{
        ///	vec2 centerCoord = gl_TexCoord[0].st;
        ///	vec3 accum = vec3(0.0);
        ///
        ///	int numSamples = 16;
        ///	float a = 0;
        ///	float r = 0;
        ///	float factor = 1.0f;
        ///
        ///	for (int sample = 0; sample &lt; numSamples; sample++)
        ///	{
        ///		r += 0.005 * dist;
        ///		a += 0.964f;
        ///		vec2 sampleLoc = vec2(r * sin(a), r * cos(a));
        ///		accum += texture2D(textureImage, centerCoord + sampleLoc).rgb * factor;
        ///		factor *= 0.8f;
        ///	}
        ///	gl_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Frag_PointBlur {
            get {
                return ResourceManager.GetString("Frag_PointBlur", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 120
        ///
        ///uniform sampler2D textureImage;
        ///uniform sampler2D distortionMap;
        ///uniform float distortion; // from 0.0 to about 0.75 works well
        ///uniform float time; // not sure the timescale to use here. Seconds I guess?
        ///
        ///void main( void )
        ///{
        ///    float wobbleX = (0.4 * sin(time * 1.32)) +
        ///                    (0.3 * cos(time * 0.76)) +
        ///                    (0.2 * sin(time * 1.9)) +
        ///                    (0.2 * cos(time * 2.76));
        ///    float wobbleY = (0.4 * cos(time * 1.12)) +
        ///                    (0.3 * [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Frag_Scrambler {
            get {
                return ResourceManager.GetString("Frag_Scrambler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to varying vec4 frontColor;
        ///
        ///void main( void )
        ///{
        ///	gl_FragColor = frontColor;
        ///}
        ///.
        /// </summary>
        internal static string Frag_Std {
            get {
                return ResourceManager.GetString("Frag_Std", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform sampler2D textureImage;
        ///varying vec4 frontColor;
        ///
        ///void main( void )
        ///{
        ///	gl_FragColor = texture2D( textureImage, gl_TexCoord[0].st ) * frontColor;
        ///}
        ///.
        /// </summary>
        internal static string Frag_Texture {
            get {
                return ResourceManager.GetString("Frag_Texture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform sampler1D textureImage;
        ///varying vec4 frontColor;
        ///
        ///void main( void )
        ///{
        ///	gl_FragColor = texture1D( textureImage, gl_TexCoord[0].s ) * frontColor;
        ///}
        ///.
        /// </summary>
        internal static string Frag_Texture1D {
            get {
                return ResourceManager.GetString("Frag_Texture1D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform mat4 projectionMatrix;
        ///uniform mat4 modelViewMatrix;
        ///varying vec4 frontColor;
        ///
        ///void main( void )
        ///{
        ///	gl_Position = projectionMatrix * modelViewMatrix * gl_Vertex;
        ///	gl_TexCoord[0] = gl_MultiTexCoord0;
        ///	frontColor = gl_Color;
        ///}
        ///.
        /// </summary>
        internal static string Vert_Std {
            get {
                return ResourceManager.GetString("Vert_Std", resourceCulture);
            }
        }
    }
}
